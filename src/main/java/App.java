
import IO.*;
import bookmark.BookmarkContainer;
import bookmark.Kirja;
import java.awt.Desktop;
import java.util.ArrayList;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        
        IO input = new ConsoleIO();
        BookmarkContainer container = new BookmarkContainer();
        
        while(true){
            System.out.println("Type \"new\" to create a bookmark or \"browse\" to browse the bookmarks");
            String command = input.nextLine();
            if(command.equals("new")){
                createNew(container, input);
            }else if(command.equals("browse")){
                if(container.size()==0){
                    System.out.println("No bookmarks");
                }else{
                    browse(container, input);
                }
            }else if(command.equals("exit")){
                break;
            }else{
                System.out.println("Invalid command");
            }
        }
    }
    
    private static void browse(BookmarkContainer container, IO input){
        while(true){
            System.out.println("Type \"next\" to see next bookmark, \"show\" to show more information on the current one or \"exit\" to stop browsing bookmarks.");
            System.out.println(container.getCurrent().getOtsikko()+(container.getIndex()+1)+"/"+container.size());
            String command = input.nextLine();
            if(command.equals("next")){
                container.getNext();
            }else if(command.equals("show")){
                System.out.println(container.getCurrent());
            }else if(command.equals("exit")){
                break;
            }else{
                System.out.println("Invalid command.");
            }
        }
    }
    
    private static void createNew(BookmarkContainer container, IO input){
        System.out.println("Provide the information, please.");
        System.out.println("What kind of a bookmark would you like to save? (book)");
        String type = input.nextLine();
        ArrayList<String> types = new ArrayList<>();
        types.add("book");
        while(!types.contains(type)){
            System.out.println("Invalid type.");
            type = input.nextLine();
        }
        System.out.println("Title:");
        String title = input.nextLine();
        System.out.println("Give tags one by one for as long as you want; type nothing to stop.");
        ArrayList<String> tags = new ArrayList<>();
        while(true){
            String newTag = input.nextLine();
            if(newTag.trim().equals("")) break;
            tags.add(newTag);
        }
        System.out.println("Type a comment if you want to leave one.");
        String comment = input.nextLine();
        System.out.println("Give as many prerequisite courses as you want.");
        ArrayList<String> preC = new ArrayList<>();
        while(true){
            String newC = input.nextLine();
            if(newC.trim().equals("")) break;
            preC.add(newC);
        }
        System.out.println("Give as many related courses as you want.");
        ArrayList<String> relC = new ArrayList<>();
        while(true){
            String newC = input.nextLine();
            if(newC.trim().equals("")) break;
            relC.add(newC);
        }
        
        if(type.equals("book")){
            System.out.println("Author:");
            String author = input.nextLine();
            System.out.println("ISBN:");
            String isbn = input.nextLine();
            Kirja newB = new Kirja(title, author, isbn);
            newB.setEsitietokurssit(preC);
            newB.setKommentti(comment);
            newB.setLiittyvatKurssit(relC);
            newB.setOtsikko(title);
            newB.setTagit(tags);
            container.add(newB);
        }
    }
}


import IO.*;
import bookmark.BookmarkContainer;
import bookmark.Book;
import bookmark.Bookmark;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {       
        IO io = new ConsoleIO();
        run(io);
    }
    
    public static void run(IO io) {
        
        // samples option for cucumber testing
        
        BookmarkContainer container = new BookmarkContainer();
        while(true){
            String command = io.nextLine("Type \"new\" to create a bookmark, \"browse\" to browse the bookmarks or \"exit\" to quit the application");

            if(command.equals("new")){
                createNew(container, io);
            }else if(command.equals("browse")){
                if(container.size()==0){
                    io.print("No bookmarks");
                }else{
                    browse(container, io);
                }
            }else if(command.equals("exit")){
                break;
            }else if(command.equals("samples")){
                container.add(new Book("Kalaopas", "Kimmo Kala", "8493-33"));
                container.add(new Book("Reitittimet 1992-1996", "Koodi Kalevi", "43289-23432"));
            } else {
                io.print("Not a command");
            }
        }
    }
    
    private static void browse(BookmarkContainer container, IO io){
        while(true){
            io.print(container.getCurrent().getTitle()+" "+(container.getIndex()+1)+"/"+container.size());
            String command = io.nextLine("Type \"next\" to see the next bookmark, \"show\" to show more information on the current one, \"edit\" to edit the current one or \"exit\" to stop browsing bookmarks.");
            if(command.equals("next")){
                container.getNext();
            }else if(command.equals("show")){
                io.print(container.getCurrent().toString());
            }else if(command.equals("edit")){
                edit(container.getCurrent(), io);
            }else if(command.equals("exit")){
                break;
            }else{
                io.print("Invalid command.");
            }
        }
    }

    private static void edit(Bookmark bm, IO io) {
        while (true) {
            String command = io.nextLine("Type which field to edit (title, tags, prerequisites, related, comment).");
            if(command.trim().equals("")) break;
                
            if (command.equals("title")) {
                String title = io.nextLine("Current title: " + bm.getTitle() + ". Set new:");
                if (!title.trim().equals("")) bm.setTitle(title);
            } else if (command.equals("tags")) {
                List<String> tags = bm.getTags();
                io.print(Bookmark.attributeToString("Tags: ", Bookmark.list(tags)));
                String tag = io.nextLine("Type an existing tag to remove it or a new one to add it.");
                addOrRemove(tags, tag);
            } else if (command.equals("prerequisites")) {
                List<String> preC = bm.getPrerequisiteCourses();
                io.print(Bookmark.attributeToString("Prerequisite courses: ", Bookmark.list(preC)));
                String course = io.nextLine("Type an existing course to remove it or a new one to add it.");
                addOrRemove(preC, course);
            } else if (command.equals("related")) {
                List<String> relC = bm.getRelatedCourses();
                io.print(Bookmark.attributeToString("Related courses: ", Bookmark.list(relC)));
                String course = io.nextLine("Type an existing course to remove it or a new one to add it.");
                addOrRemove(relC, course);
            } else if (command.equals("comment")) {
                String comment = io.nextLine("Current comment: " + bm.getComment() + ". Set new:");
                if (!comment.trim().equals("")) bm.setComment(comment);
            } else {
                io.print("Not a command.");
            }
        }
    }

    private static void addOrRemove(List<String> list, String item) {
        if (list.contains(item)) {
            for (Iterator<String> iter = list.listIterator(); iter.hasNext();) {
                String a = iter.next();
                if (a.equals(item)) {
                    iter.remove();
                }
            }
        } else if (!item.trim().equals("")){
            list.add(item);
        }
    }
    
    private static void createNew(BookmarkContainer container, IO io){
        io.print("Provide the information, please.");
        String type = io.nextLine("What kind of a bookmark would you like to save? (book) Type \"exit\" to return.");
        ArrayList<String> types = new ArrayList<>();
        types.add("book");
        types.add("exit");
        while(!types.contains(type)){
            type = io.nextLine("Invalid type.");
        }
        if (type.equals("exit")) return;
        String title = io.nextLine("Title:");
        ArrayList<String> tags = new ArrayList<>();
        while(true){
            String newTag = io.nextLine("Give tags one by one for as long as you want; input an empty line to stop.");
            if(newTag.trim().equals("")) break;
            tags.add(newTag);
        }
        String comment = io.nextLine("Type a comment if you want to leave one.");
        ArrayList<String> preC = new ArrayList<>();
        while(true){
            String newC = io.nextLine("Give as many prerequisite courses as you want.");
            if(newC.trim().equals("")) break;
            preC.add(newC);
        }
        ArrayList<String> relC = new ArrayList<>();
        while(true){
            String newC = io.nextLine("Give as many related courses as you want.");
            if(newC.trim().equals("")) break;
            relC.add(newC);
        }
        
        if(type.equals("book")){
            String author = io.nextLine("Author:");
            String isbn = io.nextLine("ISBN:");
            Book newB = new Book(title, author, isbn);
            newB.setPrerequisiteCourses(preC);
            newB.setComment(comment);
            newB.setRelatedCourses(relC);
            newB.setTitle(title);
            newB.setTags(tags);
            container.add(newB);
            io.print("Bookmark created.");
        }
    }
}
